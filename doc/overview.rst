==========
 Overview
==========


.. _Virtualenv: http://pypi.python.org/pypi/virtualenv 
.. _Virtualenvwrapper: 
   http://www.doughellmann.com/projects/virtualenvwrapper/
.. _Practical Astronomy With Your Calculator: 
  http://www.amazon.com/Practical-Astronomy-Calculator-Peter-Duffett-Smith/dp/0521356997

.. contents::

Telescope Pointing Machine C library
====================================

.. _Telescope Pointing Machine: http://www.sal.wisc.edu/~jwp/astro/tpm/tpm.html
.. _Jeff Percival: http://www.sal.wisc.edu/~jwp/
.. _SWIG: http://www.swig.org/
.. _coords: https://trac6.assembla.com/astrolib
.. _astrolib: https://trac6.assembla.com/astrolib
.. _KPNO WIYN observatory: http://www.noao.edu/wiyn/wiyn.html
.. _WHAM: http://www.astro.wisc.edu/wham/
.. _KPNO: http://www.noao.edu/kpno
.. _ipython: http://ipython.scipy.org

.. currentmodule:: pytpm

`Telescope Pointing Machine`_ , TPM, is a C library written by `Jeff
Percival`_, for performing coordinate conversions between several
astronomical coordinate systems. It is used by the `KPNO WIYN
observatory`_ and the WHAM_ project for calculating directions of
astronomical objects.

PyTPM is a Python interface to the TPM library, generated using the
SWIG_ application.

A convenience function, :func:`pytpm.tpm.convert`, is provided for
performing coordinate conversions. This function is an interface to a
function of the same name provided in the file *convert.c*. This
function takes a large number of arguments, and so is not very user
friendly. A second function, :func:`pytpm.utils.convert`, accepts
keyword arguments, many of which have default values, and then calls
the :func:`pytpm.tpm.convert` function. This function is the preferred
tool for performing coordinate conversions.

PyTPM is a direct interface to the TPM library and do not add object
oriented features on top of the C constructs i.e., this module is not,
at this time, quite "pythonic".

The main function needed for performing coordinate transformation in
TPM is ``tpm()``. This needs as one of its input an array of a
particular C structure used in TPM. At this time, this array cannot be
created from within PyTPM and hence directly calling the ``tpm()``
function is not possible. 

Installing PyTPM
================

Requirements
------------

+ A recent version of Python and gcc 
+ swig, if the swig output files are to be regenerated.

This library was tested using python 2.6 and gcc 4.4, on Fedora 13 and
Ubuntu 10.10. SWIG 1.3 is used for building the interface.

Installation
------------

The source code for PyTPM can be found at http://github.com/phn/pytpm.

The package can be installed by running the command

.. code-block:: sh

  $ python setup.py install

in the main source code directory.

This will install the library in the default python *site-packages*
directory, which usually requires root access. 

For Python versions >= 2.6, we can install the package without needing
root access using:

.. code-block:: sh

  $ python setup.py install --user


If that doesn't work then, then the package can be installed in the
*PYTHONPATH* directory. The following assumes that the Python version
is 2.6 and the shell is bash.

.. code-block:: sh

  $ mkdir ~/lib
  $ export PYTHONPATH=${HOME}/lib/python2.6/site-packages
  $ python setup.py install --prefix=${HOME}


Even better, run ``python setup.py install`` inside a virtual
environment created using `virtualenv`_ and `virtualenvwrapper`_.

Source files and SWIG interface
-------------------------------

The TPM source code is present in the directory *src/tpm*, and was
obtained from the source distribution of the coords_ package, which is
part of the astrolib_ library. The convenience function,
:func:`pytpm.tpm.convert`, is defined in *src/convert.c*.

The macros for manipulating vectors and matrices, declared in
:file:`v3.h`, :file:`v6.h`, :file:`m3.h`, and :file:`m6.h`, have been
re-written as C function. They are available in
:file:`src/v3Functions.c`, :file:`src/v6Functions.c`,
:file:`src/m3Functions.c`, :file:`src/m6Functions.c` and corresponding
headers in :file:`src/`. This was needed, since only simple macros can
be wrapped with SWIG.

The Python module *lib/utils.py*, contains implementations of the rest
of the macros in TPM, as Python functions. It also defines the
:func:`pytpm.utils.convert` function.

SWIG interface file and related header files are present in the
*swig_interface* directory. The files generated by SWIG are
*src/tpm_wrap.c* and *lib/tpm.py*. The file *SWIG_COMPILATION_CMDS*
contains commands to regenerate the SWIG output files, if needed. This
file also lists commands for creating the file *_tpm.so* and are also
described below.

To manually generate the shared library and module, run the commands
given below in the main source directory.  The first command is
required only if the SWIG output files, *lib/tpm.py* and
*src/tpm_wrap.c*, need to be regenerated. This is required when any
changes are made to C source files.

The sequence of commands will create files *_tpm.so* and *lib/tpm.py*
. Copy these two files, and the files *lib/utils.py* and
*lib/__init__.py* to a directory of choice. Adding this directory to
*PYTHONPATH* or running python from this directory, will enable access
from python. Replace "PATH-TO", in the listing below, with the actual
path to the python header files, e.g., */usr* for
*/usr/include/python2.6*

.. code-block:: sh

  $ swig -python -o src/tpm_wrap.c -outdir lib/ swig_interface/tpm.i
  $ gcc -c -fPIC src/tpm/*.c src/tpm_wrap.c src/convert.c -I PATH-TO/include/python2.6
  $ ld -shared *.o -o _tpm.so 
  $ rm -f *.o


Examples
========

For detailed information on the constants, data structures and
functions in PyTPM, see the :doc:`reference` section.

Code fragments in the following sections are from ipython_ terminal
sessions.

.. sourcecode:: ipython

    In [2]: import pytpm

    In [3]: import pytpm.tpm as tpm

    In [4]: import pytpm.utils as utils

  
Get the current *UTC* time as a *Julian date*
---------------------------------------------

.. sourcecode:: ipython

    In [5]: j = tpm.utc_now()

    In [6]: print j
    ------> print(j)
    2455441.86738

    In [7]: js = tpm.fmt_j(j)

    In [8]: print js
    ------> print(js)
     2455441  20H 49M 01.999S


The function :func:`tpm.utc_now() <pytpm.tpm.utc_now>` returns the
current *UTC* time as a *Julian day* number. The function
``tpm.fmt_j()`` returns a string representation of a *Julian date*.

Convert *Gregorian calendar* date into a *Julian date*
------------------------------------------------------

.. sourcecode:: ipython

    In [9]: j = tpm.gcal2j(2000,1,1)

    In [10]: print tpm.fmt_j(j)
    -------> print(tpm.fmt_j(j))
     2451545  00H 00M 00.000S


Function :func:`tpm.gcal2j() <pytpm.tpm.gcal2j>` converts a *Gregorian
calendar* date, given as YYYY, MM, DD, into the corresponding *Julian
date* for midday, 12H 00M 00S, of that date.

Convert a *Julian date* into a date in the *Gregorian calendar*
---------------------------------------------------------------

.. sourcecode:: ipython

    In [11]: j = tpm.gcal2j(2000,1,1)

    In [12]: d = tpm.j2gcal(j)

    In [13]: print d[0], d[1], d[2]
    -------> print(d[0], d[1], d[2])
    (2000, 1, 1)


The function :func:`tpm.j2gcal() <pytpm.tpm.j2gcal>`, returns the date
in the *Gregorian calendar*, on which, the time corresponding to the
given *Julian date* occurs.

Convert decimal degrees into *DMS* string
-----------------------------------------

.. sourcecode:: ipython

    In [14]: d = 12.3456

    In [15]: dms = tpm.d2dms(d)

    In [16]: print dms.dd, dms.mm, dms.ss
    -------> print(dms.dd, dms.mm, dms.ss)
    (12.345599999999999, 0.0, 0.0)

    In [17]: dms1 = tpm.dms2dms(dms) # normalize

    In [18]: print dms1.dd, dms1.mm, dms1.ss
    -------> print(dms1.dd, dms1.mm, dms1.ss)
    (12.0, 20.0, 44.159999999997268)

    In [19]: print utils.fmt_dms(dms)
    -------> print(utils.fmt_dms(dms))
    +12D 20' 44.159"

    In [20]: print utils.fmt_dms(dms1)
    -------> print(utils.fmt_dms(dms1))
    +12D 20' 44.159"


To convert decimal degrees into a *DMS* string we first create a
:class:`DMS <pytpm.tpm.DMS>` structure using the function
:func:`tpm.d2dms() <pytpm.tpm.d2dms>`. The function
:func:`utils.fmt_dms() <pytpm.tpm.fmt_dms>` returns a *DMS* string
representation of the time in the given ``DMS`` structure. The
function :func:`tpm.dms2dms() <pytpm.tpm.dms2dms>` takes a ``DMS``
structure and returns another one with its degree, minutes and seconds
properly normalized.

The following code replaces the default separators in the *DMS*
string.

.. sourcecode:: ipython

    In [21]: dms_str = utils.fmt_dms(dms)

    In [22]: dms_new = dms_str.replace("\'","M")

    In [23]: dms_new = dms_new.replace("\"","S")

    In [24]: print dms_new
    -------> print(dms_new)
    +12D 20M 44.159S


Convert decimal hours into *HMS* string
---------------------------------------

.. sourcecode:: ipython

    In [25]: h = 12.3456

    In [26]: hms = tpm.h2hms(h)

    In [27]: print utils.fmt_hms(hms)
    -------> print(utils.fmt_hms(hms))
     12H 20M 44.159S

The function :func:`utils.fmt_hms <pytpm.tpm.fmt_hms>` converts time
in an :class:`tpm.HMS <pytpm.tpm.HMS>` structure into an *HMS* string.


Convert astronomical coordinates between different systems
----------------------------------------------------------

The function :func:`utils.convert() <pytpm.utils.convert>` provides a
way of performing coordinate transformations with one function call
The signature of the this function is:

.. code-block:: python

  tpm.utils.convert(x=0.0, y=0.0, s1=6, s2=19, epoch=tpm.J2000, 
            equinox=tpm.J2000, timetag=None, delta_ut = 0,
            lon = -111.598333, lat = 31.956389, alt = 2093.093,
            x_pole = 0.0, y_pole = 0.0, T = 273.15, 
            P = 1013.25, H=0.0, W=0.55000):

As an example, to convert heliocentric mean FK5 J2000 coordinates
(0,0), to topocentric observed (azimuth, elevation) at the current
time, for the location corresponding to the KPNO observatory, we can
use the following function call. The default parameters are for the
KPNO observatory location, and is taken from the TPM code.

.. sourcecode:: ipython

    In [28]: az,el = utils.convert()

    In [29]: print tpm.fmt_alpha(utils.d2r(az)), tpm.fmt_delta(utils.d2r(el))
    -------> print(tpm.fmt_alpha(utils.d2r(az)), tpm.fmt_delta(utils.d2r(el)))
    (' 12H 44M 50.225S', '+57D 37\' 15.349"')


The angles returned are in degrees. We convert them into radians, and
then use functions :func:`tpm.fmt_delta() <pytpm.tpm.fmt_delta>` and
:func:`tpm.fmt_alpha() <pytpm.tpm.fmt_alpha>` to format them into
*DMS* and *HMS* strings, respectively.

The parameters accepted by ``tpm.utils.convert()`` are explained in
the table below. As mentioned before, this function is an interface to
the C function of the same name, accessible as :func:`tpm.convert()
<pytpm.tpm.convert>`, which takes the same parameters, except that the
input and output angles are in radians and all arguments must be
specified.

+------------+----------------------------------------------------+
| Parameter  | Description                                        |
+============+====================================================+
| x          | input ra or longitude                              |
+------------+----------------------------------------------------+
| y          | input dec or latitude                              |
+------------+----------------------------------------------------+
| s1         | start state                                        |
+------------+----------------------------------------------------+
| s2         | end state                                          |
+------------+----------------------------------------------------+
| epoch      | epoch of the coordinates as Julian day number      |
+------------+----------------------------------------------------+
| equinox    | equinox of the coordinates as Julian day number    |
+------------+----------------------------------------------------+
| timetag    | time of observation as Julian day number; this is  |
|            | the time corresponding to the end state i.e.,      |
|            | target time; defaults to the current UTC           |
+------------+----------------------------------------------------+
| delta_ut   | UT1 - UTC in seconds.                              |
+------------+----------------------------------------------------+
| lon        | geographic longitude in degrees                    |
+------------+----------------------------------------------------+
| lat        | geographic latitude in degrees                     |
+------------+----------------------------------------------------+
| alt        | altitude in meters                                 |
+------------+----------------------------------------------------+
| x_pole     | ploar motion in radians                            |
+------------+----------------------------------------------------+
| y_pole     | ploar motion in radians                            |
+------------+----------------------------------------------------+
| T          | temperature in kelvin                              |
+------------+----------------------------------------------------+
| P          | pressure in milli-bars                             |
+------------+----------------------------------------------------+
| H          | relative humidity (0-1)                            |
+------------+----------------------------------------------------+
| W          | wavelength of observation in microns               |
+------------+----------------------------------------------------+
 
The default values are indicated in the code fragment above. The
default location is the KPNO_ observatory and the data is taken from
the *TPM* source code, to be consistent with it.

There are 21 states, plus a "null" state, defined in *TPM*. These are
given below. The states can be identified using integers or the
special integer constants. For more details consult the :download:`TPM
manual <TPM/tpm.pdf>` (PDF file; also included with source code). See
:doc:`tpm` for a brief description of the TPM library. WHAM refers to
the coordinate system used by the WHAM_ project.

+---------+------------------------------------------------+
| State   | Description                                    |
+=========+================================================+
| TPM_S00 | Null                                           |
+---------+------------------------------------------------+
| TPM_S01 | Heliocentric mean FK4 system, any equinox      |
+---------+------------------------------------------------+
| TPM_S02 | Heliocentric mean FK5 system, any equinox      |
+---------+------------------------------------------------+
| TPM_S03 | IAU 1980 Ecliptic system                       |
+---------+------------------------------------------------+
| TPM_S04 | IAU 1958 Galactic system                       |
+---------+------------------------------------------------+
| TPM_S05 | Heliocentric mean FK4 system, B1950 equinox    |
+---------+------------------------------------------------+
| TPM_S06 | Heliocentric mean FK5 system, J2000 equinox    |
+---------+------------------------------------------------+
| TPM_S07 | Geocentric mean FK5 system, J2000 equinox      |
+---------+------------------------------------------------+
| TPM_S08 | TPM_S07 + light deflection                     |
+---------+------------------------------------------------+
| TPM_S09 | TPM_S08 + Aberration                           |
+---------+------------------------------------------------+
| TPM_S10 | TPM_S09 + precession                           |
+---------+------------------------------------------------+
| TPM_S11 | Geocentric apparent FK5, current equinox       |
+---------+------------------------------------------------+
| TPM_S12 | Topocentric mean FK5, J2000 equinox            |
+---------+------------------------------------------------+
| TPM_S13 | TPM_S12 + light definition                     |
+---------+------------------------------------------------+
| TPM_S14 | TPM_S13 + aberration                           |
+---------+------------------------------------------------+
| TPM_S15 | TPM_S14 + precession                           |
+---------+------------------------------------------------+
| TPM_S16 | Topocentric apparent FK5, current equinox      |
+---------+------------------------------------------------+
| TPM_S17 | Topocentric apparent FK5, current equinox      |
+---------+------------------------------------------------+
| TPM_S18 | Topocentric apparent (Hour Angle, Declination) |
+---------+------------------------------------------------+
| TPM_S19 | Topocentric observed (Azimuth, Elevation)      |
+---------+------------------------------------------------+
| TPM_S20 | Topocentric observed (Hour Angle, Declination) |
+---------+------------------------------------------------+
| TPM_S21 | Topocentric observed WHAM (longitude, latitude)|
+---------+------------------------------------------------+

Some of these states have additional special names.

+-------------------+-------------------+
| Name              | State             |
+===================+===================+
| TARGET_FK4        |      (TPM_S01)    |  
+-------------------+-------------------+
| TARGET_FK5        |      (TPM_S02)    |
+-------------------+-------------------+
| TARGET_ECL        |      (TPM_S03)    |
+-------------------+-------------------+
| TARGET_GAL        |      (TPM_S04)    |
+-------------------+-------------------+
| TARGET_APP_HADEC  |      (TPM_S17)    |
+-------------------+-------------------+
| TARGET_OBS_HADEC  |      (TPM_S20)    |
+-------------------+-------------------+
| TARGET_APP_AZEL   |      (TPM_S18)    |
+-------------------+-------------------+
| TARGET_OBS_AZEL   |      (TPM_S19)    |
+-------------------+-------------------+
| TARGET_OBS_WHAM   |      (TPM_S21)    |
+-------------------+-------------------+

In the following example we convert the (RA,DEC) coordinates in FK5
system into (Az, EL) for KPNO, at the Julian date 2455363.5 .

.. sourcecode:: ipython

    In [30]: # Change site parameters to that for KPNO given by JPL HORIZONS
    In [31]: kpno = {'lon':248.405300, 'lat':31.9584932, 'P':5.6, 'T':210,
       ....: 'H':0}
    In [32]: # RA,DEC for Mars at JD = 2455363.5

    In [33]: ra = (10.0+27.0/60.0+06.79/3600.0)*15.0

    In [34]: dec = 10+55/60.0+40.4/3600.0

    In [35]: az,el = utils.convert(ra,dec,timetag=2455363.5,**kpno)

    In [36]: print tpm.fmt_d(az), tpm.fmt_d(el)
    -------> print(tpm.fmt_d(az), tpm.fmt_d(el))
    ('+168D 14\' 30.773"', '+68D 32\' 07.244"')

    In [37]: # print values given by JPL HORIZONS

    In [39]: print tpm.fmt_d(168.2412), tpm.fmt_d(68.5353)
    -------> print(tpm.fmt_d(168.2412), tpm.fmt_d(68.5353))
    ('+168D 14\' 28.319"', '+68D 32\' 07.080"')


In tests, the ``convert`` function was used to convert SIMBAD
coordinates between different systems. These tests are in the file
``test/test_convert.py`` file. The Python module gives identical
results to that from the binary created with the TPM C library,
using the ``tpm_main.c`` program that is included in the source code.

When values were compared with those given by SIMBAD itself,for
example, convert SIMBAD coordinates from FK4 to FK5 and compare with
SIMBAD FK5, the result from ``convert`` agreed to 3 decimal places in
decimal degrees, i.e., slightly greater than 2-3 arc-second.

The following example is taken from page 36 of the book `Practical
Astronomy With Your Calculator`_.  We convert hour angle and
declination to azimuth and latitude for an observer at 52.0 degree
north latitude. The only quantity of concern that is different from
the defaults is the observer's latitude.

.. sourcecode:: ipython

  In [2]: lat = 52.0 # Degrees north.
   
  In [3]: hour_angle = utils.h2d(5.862222) # East.
   
  In [4]: declination = 23.219444 # Degrees north.
   
  In [7]: azimuth, elevation = \
     ....:  utils.convert(hour_angle, declination, s1=17, s2=18, lat=lat)
   
  In [9]: if azimuth < 0:
     ....:  azimuth += 360.0
     ....:     
     ....:     
   
  In [11]: print tpm.fmt_d(azimuth), tpm.fmt_d(elevation)
  -------> print(tpm.fmt_d(azimuth), tpm.fmt_d(elevation))
  ('+283D 16\' 15.688"', '+19D 20\' 03.648"')

For more information see reference sections for :doc:`reference_tpm`
and :doc:`reference_utils`.

Credits
=======

`Jeff Percival`_ wrote the TPM__ C library. See
:file:`src/tpm/TPM_LICENSE.txt` for TPM license. The version used here
was obtained from the coords_ package of the astrolib_ library. Send
email to user prasanthhn, at the gmail.com domain, for reporting
errors, comments, suggestions etc., for the PyTPM library.

__ Telescope Pointing Machine

License
=======

See :file:`src/tpm/TPM_LICENSE.txt` for TPM license. Code for the
Python binding itself is released under the BSD license; see
LICENSE.txt.
