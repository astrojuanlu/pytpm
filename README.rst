Python interface to the  TPM library
====================================

.. _Telescope Pointing Machine: http://www.sal.wisc.edu/~jwp/astro/tpm/tpm.html
.. _Jeff Percival: http://www.sal.wisc.edu/~jwp/
.. _SWIG: http://www.swig.org/
.. _coords: https://trac6.assembla.com/astrolib
.. _astrolib: https://trac6.assembla.com/astrolib
.. _KPNO WIYN observatory: http://www.noao.edu/wiyn/wiyn.html
.. _WHAM: http://www.astro.wisc.edu/wham/
.. _KPNO: http://www.noao.edu/kpno

`Telescope Pointing Machine`_ , TPM, is a C library written by `Jeff
Percival`_, for carrying out calculations related to astrometry. The
main use of the TPM library is for performing coordinate conversions
between several astronomical coordinate systems. It is used by the
`KPNO WIYN observatory`_ and the WHAM_ project for calculating
directions of target objects.

This module, *pytpm*, is a python interface to the TPM library. The
interface is generated using the SWIG_ application.

This module can be used to call functions in the TPM library, except
those functions/macros that interact directly with vectors and
matrices.

A covenience function, *convert*, is provided for calling the TPM code
to perform coordinate conversions. This function is an interface to a
function of the same name provided in the file *convert.c*.

Source files
------------

The TPM source code is present in the directory *src/tpm*, and was
obtained from the source distribution of the coords_ package, which is
part of the astrolib_ library. The convenience function, *convert*, is
defined in *src/convert.c*.

The python module *lib/utils.py*, contains implementation of various
macros in the TPM as python functions. It also defines the *convert*
function, which interfaces with the function of the same name in
*src/convert.c*. 

SWIG interface file and related header files are present in the
*swig_interface*. The files generated by SWIG are *src/tpm_wrap.c* and
*lib/tpm.py*. The file *SWIG_COMPILATION_CMDS* contains commands to
regenerate the SWIG output files, if needed. This file also lists
commands for creating the file *_tpm.so*.

Requirements
------------

+ A recent version of Python and gcc 
+ swig, if the swig output files are to be regenerated.

This library was tested using python 2.6 and gcc 4.4, on Fedora 13.

Installation
------------

The package can be installed by running the command

::

  $ python setup.py install

in the main source code directory.

This will install the library in the default python *site-packages*
directory, which usually requires root access. To install the library
in a different location, the following commands can be used. In this
case the *PYTHONPATH* environment variable must be set accordingly.
The following assumes that the python version is 2.6 and the shell is
bash.

::

  $ mkdir ~/lib/python
  $ python setup.py install --prefix=~/lib/python
  $ export PYTHONPATH=~/lib/python/lib/python2.6/site-packages


To manually generate the static library and module, run the commands
given below in the main source directory.  The first command is
required only if the SWIG output files, *lib/tpm.py* and
*src/tpm_wrap.c*, needs to be regenerated. The sequence of commands
will create files *src/_tpm.so* and *lib/tpm.py*
directory. Copy these two files and the *lib/utils.py* file to a
directory of choice. Adding this directory to *PYTHONPATH* or running
python from this directory, will enable access from python. Replace
"PATH-TO", in the listing below, with the actual path to the python
header files, e.g., */usr*, for */usr/include/python2.6*

::

  $ swig -python -o src/tpm_wrap.c -outdir lib/ swig_interface/tpm.i
  $ gcc -c src/tpm/*.c src/tpm_wrap.c src/convert.c -I PATH-TO/include/python2.6
  $ ld -shared *.o -o _tpm.so 
  $ rm -f *.o


Examples
--------

Import the module.

::
  
  import pytpm
  import pytpm.tpm as tpm
  import pytpm.utils as tpmu

  
Get the current *UTC* time as a *Julian day* number
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



  j = tpm.utc_now()
  print j
  js = tpm.fmt_j(j)
  print js

The function ``tpm.utc_now()`` returns the current *UTC* time as a
*Julian day* number. The function ``tpm.fmt_j()`` returns a string
represenation of a *Julian day* number.

Convert *Gregorian calendar* date into a *Julian day* number
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

  j = tpm.gcal2j(2000,1,1)
  print tpm.fmt_j(j)

Function ``tpm.gcal2j()`` converts a *Gregorian calendar* date, given
as  YYYY, MM, DD, into the corresponding *Julian day* number for
midday, 12H 00M 00S, of that date.

Convert a *Julian day* number into a date in the *Gregorian calendar*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

  j = tpm.gcal2j(2000,1,1)
  d = tpm.j2gcal(j)
  print d[0], d[1], d[2]

The function ``tpm.j2gcal()``, returns the date in the *Gregorian
calendar*, in which the time corresponding to the given *Julian day*
number occurs.

Convert decimal degrees into *DMS* string
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

  d = 12.3456
  dms = tpm.d2dms(d)
  print dms.dd, dms.mm, dms.ss
  dms1 = tpm.dms2dms(dms) # normalize 
  print dms1.dd, dms1.mm, dms1.ss
  print tpmu.fmt_dms(dms)
  print tpmu.fmt_dms(dms1)

To convert decimal degrees into a *DMS* string we first create a *DMS
structure* using the function ``tpm.d2dms()``. The function
``tpmu.fmt_dms()`` returns a *DMS* string representation of the time
in the given *DMS* structure. The function ``tpm.dmsdms()`` takes a
*DMS structure* and returns another one with its degree, minutes and
seconds properly formatted.

The following code replaces the default separators in the *DMS*
string.

::

  dms_str = tpmu.fmt_dms(dms)   
  dms_new = dms_str.replace("\'","M")
  dms_new = dms_new.replace("\"","S")
  print dms_new


Convert decimal hours into *HMS* string
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

  h = 12.3456
  hms = tpm.h2hms(h)
  print tpmu.fmt_hms(hms)


Convert astronomical coordinates between different systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*TPM* uses the concept of *states* while performing coordinate
transformations. A *state* is defined by various parameters such as
coordinate system, numberical values of the coordinates, location of
the observer, temperature, pressure etc., . We convert angles in one
system to another by specifying the starting *state* and the desired
end state.

The function *pytpm.utils.convert* provides a way of performing this
transformation with one function call, similar to the way the *TPM* C
library is used. The signature of the this function is:

::

  tpm.utils.convert(x=0.0, y=0.0, s1=6, s2=19, epoch=2451545.0,
                    equinox=2451545.0, timetag=None, lon=-111.598333,
                    lat=31.956389, alt=2093.093, T=273.15, P=1013.25,
                    H=0.0, W=0.55000)

As an example, to convert, heliocentric mean FK5 J2000 coordinates
(0,0), to topocentric observed (azimuth, elevation) at the current
time, for location corresponding to the KPNO observatory, we can use
the following function call. The default parameters are for the KPNO
observatory location, and is taken from the TPM code.

::

  az,el = tpmu.convert()
  print tpm.fmt_alpha(tpm.utils.d2r(az)),\
        tpm.fmt_delta(tpm.utils.d2r(el))

The angles returned are in degrees. We convert them into radians and
use ``tpm.utils.fmt_delta()`` and ``tpm.utils.fmt_alpha()`` to format
then into *DMS* and *HMS* strings, respectively.

The parameters accepted by ``tpm.utils.convert()`` are explained in
the table below. As mentioned before, this function is an interface to
the C function of the same name, accessible as ``tpm.convert()``,
which takes the same parameters, except that the input and output
angles are in radians and all arguments must be specified.

+------------+----------------------------------------------------+
| Parameter  | Description                                        |
+============+====================================================+
| x          | input ra or longitude                              |
+------------+----------------------------------------------------+
| y          | input dec or latitude                              |
+------------+----------------------------------------------------+
| s1         | start state                                        |
+------------+----------------------------------------------------+
| s2         | end state                                          |
+------------+----------------------------------------------------+
| epoch      | epoch of the coordinates as Julian day number      |
+------------+----------------------------------------------------+
| equinox    | equinox of the coordinates as Julian day number    |
+------------+----------------------------------------------------+
| timetag    | time of observation as Julian day number; this is  |
|            | the time corresponding to the end state i.e.,      |
|            | target time; defaults to the current UTC           |
+------------+----------------------------------------------------+
| lon        | geographic longitude in degrees                    |
+------------+----------------------------------------------------+
| lat        | geographic latitude in degrees                     |
+------------+----------------------------------------------------+
| alt        | altitude in meters                                 |
+------------+----------------------------------------------------+
| T          | temperature in kelvin                              |
+------------+----------------------------------------------------+
| P          | pressure in milli-bars                             |
+------------+----------------------------------------------------+
| H          | relative humidity (0-1)                            |
+------------+----------------------------------------------------+
| W          | wavelength of observation in microns               |
+------------+----------------------------------------------------+
 
The default values are indicated in the code fragment above. The
default location is the KPNO_ observatory and the data is taken from
the *TPM* source code, to be consistent with it.

There are 21 states, plus a "null" state, defined in *TPM*. These are
given below. The states can be identified using integers or the
special integer constants. For more details consult the *TPM*
documentation, a PDF copy of which is included in the *doc*
directory. WHAM_ refers to the coordinate system used by the WHAM_
project. 

+---------+------------------------------------------------+
| State   | Description                                    |
+=========+================================================+
| TPM_S00 | Null                                           |
+---------+------------------------------------------------+
| TPM_S01 | Heliocentric mean FK4 system, any equinox      |
+---------+------------------------------------------------+
| TPM_S02 | Heliocentric mean FK5 system, any equinox      |
+---------+------------------------------------------------+
| TPM_S03 | IAU 1980 Ecliptic system                       |
+---------+------------------------------------------------+
| TPM_S04 | IAU 1958 Galactic system                       |
+---------+------------------------------------------------+
| TPM_S05 | Heliocentric mean FK4 system, B1950 equinox    |
+---------+------------------------------------------------+
| TPM_S06 | Heliocentric mean FK5 system, J2000 equinox    |
+---------+------------------------------------------------+
| TPM_S07 | Geocentric mean FK5 system, J2000 equinox      |
+---------+------------------------------------------------+
| TPM_S08 | TPM_S07 + light deflection                     |
+---------+------------------------------------------------+
| TPM_S09 | TPM_S08 + Aberration                           |
+---------+------------------------------------------------+
| TPM_S10 | TPM_S09 + precession                           |
+---------+------------------------------------------------+
| TPM_S11 | Geocentric apparent FK5, current equinox       |
+---------+------------------------------------------------+
| TPM_S12 | Topocentric mean FK5, J2000 equinox            |
+---------+------------------------------------------------+
| TPM_S13 | TPM_S12 + light definition                     |
+---------+------------------------------------------------+
| TPM_S14 | TPM_S13 + aberration                           |
+---------+------------------------------------------------+
| TPM_S15 | TPM_S14 + precession                           |
+---------+------------------------------------------------+
| TPM_S16 | Topocentric apparent FK5, current equinox      |
+---------+------------------------------------------------+
| TPM_S17 | Topocentric apparent FK5, current equnix       |
+---------+------------------------------------------------+
| TPM_S18 | Topocentric apparent (Hour Angle, Declination) |
+---------+------------------------------------------------+
| TPM_S19 | Topecentric observed (Azimuth, Elevation)      |
+---------+------------------------------------------------+
| TPM_S20 | Topocentric observed (Hour Angle, Declination) |
+---------+------------------------------------------------+
| TPM_S21 | Topocentric observed WHAM (longitude, latitude)|
+---------+------------------------------------------------+

In the following example we convert the (RA,DEC) coordinates in FK5
system into (Az, EL) for KPNO, at the Julian day number 2455363.5 .

::

  # Change site parameters to that for KPNO given by JPL HORIZONS
  kpno = {'lon':248.405300, 'lat':31.9584932, 'P':5.6, 'T':210,
          'H':0}
  # RA,DEC for Mars at JD = 2455363.5
  ra = (10.0+27.0/60.0+06.79/3600.0)*15.0
  dec = dec = 10+55/60.0+40.4/3600.0
  az,el = tpmu.convert(ra,dec,timetag=2455363.5,**kpno)
  print tpm.fmt_d(az), tpm.fmt_d(el)
  # print values given by JPL HORIZONS
  print tpm.fmt_d(168.2412), tpm.fmt_fmt_d(68.5353)

The results are very close to those from JPL HORIZONS.
 
Credits
-------

`Jeff Percival`_ wrote the TPM__ C library. See
src/tpm/TPM_LICENSE.txt for TPM license. The version used here was
obtained from the coords_ package of the astrolib_ library. Send me,
Prasanth Nair, an email to the email account prasanthhn hosted at
gmail (trying to beat spam!), for reporting errors, comments,
suggestions etc., for the *pytpm* library.

__ Telescope Pointing Machine

License
-------

See src/tpm/TPM_LICENSE.txt for TPM license. Code for the python
binding itself is released under the BSD license. See LICENSE.txt.
