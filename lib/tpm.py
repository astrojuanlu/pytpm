# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tpm', [dirname(__file__)])
        except ImportError:
            import _tpm
            return _tpm
        if fp is not None:
            try:
                _mod = imp.load_module('_tpm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tpm = swig_import_helper()
    del swig_import_helper
else:
    import _tpm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class V3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, V3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, V3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _tpm.V3_type_set
    __swig_getmethods__["type"] = _tpm.V3_type_get
    if _newclass:type = _swig_property(_tpm.V3_type_get, _tpm.V3_type_set)
    __swig_setmethods__["v"] = _tpm.V3_v_set
    __swig_getmethods__["v"] = _tpm.V3_v_get
    if _newclass:v = _swig_property(_tpm.V3_v_get, _tpm.V3_v_set)
    def __init__(self): 
        this = _tpm.new_V3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_V3
    __del__ = lambda self : None;
V3_swigregister = _tpm.V3_swigregister
V3_swigregister(V3)

class V6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, V6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, V6, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _tpm.V6_v_set
    __swig_getmethods__["v"] = _tpm.V6_v_get
    if _newclass:v = _swig_property(_tpm.V6_v_get, _tpm.V6_v_set)
    def __init__(self): 
        this = _tpm.new_V6()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_V6
    __del__ = lambda self : None;
V6_swigregister = _tpm.V6_swigregister
V6_swigregister(V6)

POS = _tpm.POS
VEL = _tpm.VEL
class M3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m"] = _tpm.M3_m_set
    __swig_getmethods__["m"] = _tpm.M3_m_get
    if _newclass:m = _swig_property(_tpm.M3_m_get, _tpm.M3_m_set)
    def __init__(self): 
        this = _tpm.new_M3()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_M3
    __del__ = lambda self : None;
M3_swigregister = _tpm.M3_swigregister
M3_swigregister(M3)

class M6(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, M6, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, M6, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m"] = _tpm.M6_m_set
    __swig_getmethods__["m"] = _tpm.M6_m_get
    if _newclass:m = _swig_property(_tpm.M6_m_get, _tpm.M6_m_set)
    def __init__(self): 
        this = _tpm.new_M6()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_M6
    __del__ = lambda self : None;
M6_swigregister = _tpm.M6_swigregister
M6_swigregister(M6)

M_PI = _tpm.M_PI
CARTESIAN = _tpm.CARTESIAN
SPHERICAL = _tpm.SPHERICAL
POLAR = _tpm.POLAR

def m3I(*args):
  return _tpm.m3I(*args)
m3I = _tpm.m3I

def m3O():
  return _tpm.m3O()
m3O = _tpm.m3O

def m3Rx(*args):
  return _tpm.m3Rx(*args)
m3Rx = _tpm.m3Rx

def m3RxDot(*args):
  return _tpm.m3RxDot(*args)
m3RxDot = _tpm.m3RxDot

def m3Ry(*args):
  return _tpm.m3Ry(*args)
m3Ry = _tpm.m3Ry

def m3RyDot(*args):
  return _tpm.m3RyDot(*args)
m3RyDot = _tpm.m3RyDot

def m3Rz(*args):
  return _tpm.m3Rz(*args)
m3Rz = _tpm.m3Rz

def m3RzDot(*args):
  return _tpm.m3RzDot(*args)
m3RzDot = _tpm.m3RzDot

def m3diff(*args):
  return _tpm.m3diff(*args)
m3diff = _tpm.m3diff

def m3inv(*args):
  return _tpm.m3inv(*args)
m3inv = _tpm.m3inv

def m3m3(*args):
  return _tpm.m3m3(*args)
m3m3 = _tpm.m3m3

def m3scale(*args):
  return _tpm.m3scale(*args)
m3scale = _tpm.m3scale

def m3sum(*args):
  return _tpm.m3sum(*args)
m3sum = _tpm.m3sum

def m6I(*args):
  return _tpm.m6I(*args)
m6I = _tpm.m6I

def m6O():
  return _tpm.m6O()
m6O = _tpm.m6O

def m6Qx(*args):
  return _tpm.m6Qx(*args)
m6Qx = _tpm.m6Qx

def m6Qy(*args):
  return _tpm.m6Qy(*args)
m6Qy = _tpm.m6Qy

def m6Qz(*args):
  return _tpm.m6Qz(*args)
m6Qz = _tpm.m6Qz

def m6diff(*args):
  return _tpm.m6diff(*args)
m6diff = _tpm.m6diff

def m6inv(*args):
  return _tpm.m6inv(*args)
m6inv = _tpm.m6inv

def m6m6(*args):
  return _tpm.m6m6(*args)
m6m6 = _tpm.m6m6

def m6scale(*args):
  return _tpm.m6scale(*args)
m6scale = _tpm.m6scale

def m6sum(*args):
  return _tpm.m6sum(*args)
m6sum = _tpm.m6sum

def m3v3(*args):
  return _tpm.m3v3(*args)
m3v3 = _tpm.m3v3

def m6v3(*args):
  return _tpm.m6v3(*args)
m6v3 = _tpm.m6v3

def v3c2s(*args):
  return _tpm.v3c2s(*args)
v3c2s = _tpm.v3c2s

def v3cross(*args):
  return _tpm.v3cross(*args)
v3cross = _tpm.v3cross

def v3diff(*args):
  return _tpm.v3diff(*args)
v3diff = _tpm.v3diff

def v3init(*args):
  return _tpm.v3init(*args)
v3init = _tpm.v3init

def v3s2c(*args):
  return _tpm.v3s2c(*args)
v3s2c = _tpm.v3s2c

def v3scale(*args):
  return _tpm.v3scale(*args)
v3scale = _tpm.v3scale

def v3sum(*args):
  return _tpm.v3sum(*args)
v3sum = _tpm.v3sum

def v3unit(*args):
  return _tpm.v3unit(*args)
v3unit = _tpm.v3unit

def v62v3(*args):
  return _tpm.v62v3(*args)
v62v3 = _tpm.v62v3

def m3v6(*args):
  return _tpm.m3v6(*args)
m3v6 = _tpm.m3v6

def m6v6(*args):
  return _tpm.m6v6(*args)
m6v6 = _tpm.m6v6

def v32v6(*args):
  return _tpm.v32v6(*args)
v32v6 = _tpm.v32v6

def v6c2s(*args):
  return _tpm.v6c2s(*args)
v6c2s = _tpm.v6c2s

def v6cross(*args):
  return _tpm.v6cross(*args)
v6cross = _tpm.v6cross

def v6diff(*args):
  return _tpm.v6diff(*args)
v6diff = _tpm.v6diff

def v6init(*args):
  return _tpm.v6init(*args)
v6init = _tpm.v6init

def v6s2c(*args):
  return _tpm.v6s2c(*args)
v6s2c = _tpm.v6s2c

def v6scale(*args):
  return _tpm.v6scale(*args)
v6scale = _tpm.v6scale

def v6sum(*args):
  return _tpm.v6sum(*args)
v6sum = _tpm.v6sum

def v6unit(*args):
  return _tpm.v6unit(*args)
v6unit = _tpm.v6unit

def m3fmt(*args):
  return _tpm.m3fmt(*args)
m3fmt = _tpm.m3fmt

def m6fmt(*args):
  return _tpm.m6fmt(*args)
m6fmt = _tpm.m6fmt

def v3fmt(*args):
  return _tpm.v3fmt(*args)
v3fmt = _tpm.v3fmt

def v6fmt(*args):
  return _tpm.v6fmt(*args)
v6fmt = _tpm.v6fmt

def v3alpha(*args):
  return _tpm.v3alpha(*args)
v3alpha = _tpm.v3alpha

def v3delta(*args):
  return _tpm.v3delta(*args)
v3delta = _tpm.v3delta

def v3dot(*args):
  return _tpm.v3dot(*args)
v3dot = _tpm.v3dot

def v3mod(*args):
  return _tpm.v3mod(*args)
v3mod = _tpm.v3mod

def v6alpha(*args):
  return _tpm.v6alpha(*args)
v6alpha = _tpm.v6alpha

def v6delta(*args):
  return _tpm.v6delta(*args)
v6delta = _tpm.v6delta

def v6dot(*args):
  return _tpm.v6dot(*args)
v6dot = _tpm.v6dot

def v6mod(*args):
  return _tpm.v6mod(*args)
v6mod = _tpm.v6mod
REAL = _tpm.REAL
IMAG = _tpm.IMAG
MJD_0 = _tpm.MJD_0
B1950 = _tpm.B1950
J2000 = _tpm.J2000
J1984 = _tpm.J1984
CB = _tpm.CB
CJ = _tpm.CJ
SUNDAY = _tpm.SUNDAY
MONDAY = _tpm.MONDAY
TUESDAY = _tpm.TUESDAY
WEDNESDAY = _tpm.WEDNESDAY
THURSDAY = _tpm.THURSDAY
FRIDAY = _tpm.FRIDAY
SATURDAY = _tpm.SATURDAY
class DMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dd"] = _tpm.DMS_dd_set
    __swig_getmethods__["dd"] = _tpm.DMS_dd_get
    if _newclass:dd = _swig_property(_tpm.DMS_dd_get, _tpm.DMS_dd_set)
    __swig_setmethods__["mm"] = _tpm.DMS_mm_set
    __swig_getmethods__["mm"] = _tpm.DMS_mm_get
    if _newclass:mm = _swig_property(_tpm.DMS_mm_get, _tpm.DMS_mm_set)
    __swig_setmethods__["ss"] = _tpm.DMS_ss_set
    __swig_getmethods__["ss"] = _tpm.DMS_ss_get
    if _newclass:ss = _swig_property(_tpm.DMS_ss_get, _tpm.DMS_ss_set)
    def __init__(self): 
        this = _tpm.new_DMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_DMS
    __del__ = lambda self : None;
DMS_swigregister = _tpm.DMS_swigregister
DMS_swigregister(DMS)

class HMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hh"] = _tpm.HMS_hh_set
    __swig_getmethods__["hh"] = _tpm.HMS_hh_get
    if _newclass:hh = _swig_property(_tpm.HMS_hh_get, _tpm.HMS_hh_set)
    __swig_setmethods__["mm"] = _tpm.HMS_mm_set
    __swig_getmethods__["mm"] = _tpm.HMS_mm_get
    if _newclass:mm = _swig_property(_tpm.HMS_mm_get, _tpm.HMS_mm_set)
    __swig_setmethods__["ss"] = _tpm.HMS_ss_set
    __swig_getmethods__["ss"] = _tpm.HMS_ss_get
    if _newclass:ss = _swig_property(_tpm.HMS_ss_get, _tpm.HMS_ss_set)
    def __init__(self): 
        this = _tpm.new_HMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_HMS
    __del__ = lambda self : None;
HMS_swigregister = _tpm.HMS_swigregister
HMS_swigregister(HMS)

class YMD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YMD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YMD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["y"] = _tpm.YMD_y_set
    __swig_getmethods__["y"] = _tpm.YMD_y_get
    if _newclass:y = _swig_property(_tpm.YMD_y_get, _tpm.YMD_y_set)
    __swig_setmethods__["m"] = _tpm.YMD_m_set
    __swig_getmethods__["m"] = _tpm.YMD_m_get
    if _newclass:m = _swig_property(_tpm.YMD_m_get, _tpm.YMD_m_set)
    __swig_setmethods__["dd"] = _tpm.YMD_dd_set
    __swig_getmethods__["dd"] = _tpm.YMD_dd_get
    if _newclass:dd = _swig_property(_tpm.YMD_dd_get, _tpm.YMD_dd_set)
    __swig_setmethods__["hms"] = _tpm.YMD_hms_set
    __swig_getmethods__["hms"] = _tpm.YMD_hms_get
    if _newclass:hms = _swig_property(_tpm.YMD_hms_get, _tpm.YMD_hms_set)
    def __init__(self): 
        this = _tpm.new_YMD()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_YMD
    __del__ = lambda self : None;
YMD_swigregister = _tpm.YMD_swigregister
YMD_swigregister(YMD)

class JD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dd"] = _tpm.JD_dd_set
    __swig_getmethods__["dd"] = _tpm.JD_dd_get
    if _newclass:dd = _swig_property(_tpm.JD_dd_get, _tpm.JD_dd_set)
    __swig_setmethods__["hms"] = _tpm.JD_hms_set
    __swig_getmethods__["hms"] = _tpm.JD_hms_get
    if _newclass:hms = _swig_property(_tpm.JD_hms_get, _tpm.JD_hms_set)
    def __init__(self): 
        this = _tpm.new_JD()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_JD
    __del__ = lambda self : None;
JD_swigregister = _tpm.JD_swigregister
JD_swigregister(JD)


def d2dms(*args):
  return _tpm.d2dms(*args)
d2dms = _tpm.d2dms

def dms2dms(*args):
  return _tpm.dms2dms(*args)
dms2dms = _tpm.dms2dms

def dms_diff(*args):
  return _tpm.dms_diff(*args)
dms_diff = _tpm.dms_diff

def dms_sum(*args):
  return _tpm.dms_sum(*args)
dms_sum = _tpm.dms_sum

def hms2dms(*args):
  return _tpm.hms2dms(*args)
hms2dms = _tpm.hms2dms

def dms2hms(*args):
  return _tpm.dms2hms(*args)
dms2hms = _tpm.dms2hms

def h2hms(*args):
  return _tpm.h2hms(*args)
h2hms = _tpm.h2hms

def hms2hms(*args):
  return _tpm.hms2hms(*args)
hms2hms = _tpm.hms2hms

def hms_diff(*args):
  return _tpm.hms_diff(*args)
hms_diff = _tpm.hms_diff

def hms_sum(*args):
  return _tpm.hms_sum(*args)
hms_sum = _tpm.hms_sum

def j2jd(*args):
  return _tpm.j2jd(*args)
j2jd = _tpm.j2jd

def jd2jd(*args):
  return _tpm.jd2jd(*args)
jd2jd = _tpm.jd2jd

def jd_diff(*args):
  return _tpm.jd_diff(*args)
jd_diff = _tpm.jd_diff

def jd_now():
  return _tpm.jd_now()
jd_now = _tpm.jd_now

def jd_sum(*args):
  return _tpm.jd_sum(*args)
jd_sum = _tpm.jd_sum

def ymd2jd(*args):
  return _tpm.ymd2jd(*args)
ymd2jd = _tpm.ymd2jd

def jd2ymd(*args):
  return _tpm.jd2ymd(*args)
jd2ymd = _tpm.jd2ymd

def rdb2ymd(*args):
  return _tpm.rdb2ymd(*args)
rdb2ymd = _tpm.rdb2ymd

def y2ymd(*args):
  return _tpm.y2ymd(*args)
y2ymd = _tpm.y2ymd

def ydd2ymd(*args):
  return _tpm.ydd2ymd(*args)
ydd2ymd = _tpm.ydd2ymd

def ymd2ymd(*args):
  return _tpm.ymd2ymd(*args)
ymd2ymd = _tpm.ymd2ymd

def fmt_alpha(*args):
  return _tpm.fmt_alpha(*args)
fmt_alpha = _tpm.fmt_alpha

def fmt_d(*args):
  return _tpm.fmt_d(*args)
fmt_d = _tpm.fmt_d

def fmt_delta(*args):
  return _tpm.fmt_delta(*args)
fmt_delta = _tpm.fmt_delta

def fmt_h(*args):
  return _tpm.fmt_h(*args)
fmt_h = _tpm.fmt_h

def fmt_j(*args):
  return _tpm.fmt_j(*args)
fmt_j = _tpm.fmt_j

def fmt_rdb(*args):
  return _tpm.fmt_rdb(*args)
fmt_rdb = _tpm.fmt_rdb

def fmt_ymd(*args):
  return _tpm.fmt_ymd(*args)
fmt_ymd = _tpm.fmt_ymd

def fmt_ymd_raw(*args):
  return _tpm.fmt_ymd_raw(*args)
fmt_ymd_raw = _tpm.fmt_ymd_raw

def d2d(*args):
  return _tpm.d2d(*args)
d2d = _tpm.d2d

def dms2d(*args):
  return _tpm.dms2d(*args)
dms2d = _tpm.dms2d

def gcal2j(*args):
  return _tpm.gcal2j(*args)
gcal2j = _tpm.gcal2j

def h2h(*args):
  return _tpm.h2h(*args)
h2h = _tpm.h2h

def hms2h(*args):
  return _tpm.hms2h(*args)
hms2h = _tpm.hms2h

def jcal2j(*args):
  return _tpm.jcal2j(*args)
jcal2j = _tpm.jcal2j

def jd2j(*args):
  return _tpm.jd2j(*args)
jd2j = _tpm.jd2j

def r2r(*args):
  return _tpm.r2r(*args)
r2r = _tpm.r2r

def utc_now():
  return _tpm.utc_now()
utc_now = _tpm.utc_now

def ymd2dd(*args):
  return _tpm.ymd2dd(*args)
ymd2dd = _tpm.ymd2dd

def ymd2rdb(*args):
  return _tpm.ymd2rdb(*args)
ymd2rdb = _tpm.ymd2rdb

def ymd2y(*args):
  return _tpm.ymd2y(*args)
ymd2y = _tpm.ymd2y

def argv2dms(*args):
  return _tpm.argv2dms(*args)
argv2dms = _tpm.argv2dms

def argv2hms(*args):
  return _tpm.argv2hms(*args)
argv2hms = _tpm.argv2hms

def argv2ymd(*args):
  return _tpm.argv2ymd(*args)
argv2ymd = _tpm.argv2ymd

def j2dow(*args):
  return _tpm.j2dow(*args)
j2dow = _tpm.j2dow

def y2doy(*args):
  return _tpm.y2doy(*args)
y2doy = _tpm.y2doy

def j2gcal(*args):
  return _tpm.j2gcal(*args)
j2gcal = _tpm.j2gcal

def j2jcal(*args):
  return _tpm.j2jcal(*args)
j2jcal = _tpm.j2jcal
IAU_K = _tpm.IAU_K
IAU_DM = _tpm.IAU_DM
IAU_AU = _tpm.IAU_AU
IAU_C = _tpm.IAU_C
IAU_RE = _tpm.IAU_RE
IAU_RM = _tpm.IAU_RM
IAU_F = _tpm.IAU_F
IAU_KAPPA = _tpm.IAU_KAPPA
IAU_W = _tpm.IAU_W
GAL_RA = _tpm.GAL_RA
GAL_DEC = _tpm.GAL_DEC
GAL_LON = _tpm.GAL_LON
PRECESS_NEWCOMB = _tpm.PRECESS_NEWCOMB
PRECESS_ANDOYER = _tpm.PRECESS_ANDOYER
PRECESS_KINOSHITA = _tpm.PRECESS_KINOSHITA
PRECESS_LIESKE = _tpm.PRECESS_LIESKE
PRECESS_FK4 = _tpm.PRECESS_FK4
PRECESS_FK5 = _tpm.PRECESS_FK5
PRECESS_INERTIAL = _tpm.PRECESS_INERTIAL
PRECESS_ROTATING = _tpm.PRECESS_ROTATING
class STAR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STAR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STAR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _tpm.STAR_a_set
    __swig_getmethods__["a"] = _tpm.STAR_a_get
    if _newclass:a = _swig_property(_tpm.STAR_a_get, _tpm.STAR_a_set)
    __swig_setmethods__["d"] = _tpm.STAR_d_set
    __swig_getmethods__["d"] = _tpm.STAR_d_get
    if _newclass:d = _swig_property(_tpm.STAR_d_get, _tpm.STAR_d_set)
    __swig_setmethods__["m"] = _tpm.STAR_m_set
    __swig_getmethods__["m"] = _tpm.STAR_m_get
    if _newclass:m = _swig_property(_tpm.STAR_m_get, _tpm.STAR_m_set)
    def __init__(self): 
        this = _tpm.new_STAR()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_STAR
    __del__ = lambda self : None;
STAR_swigregister = _tpm.STAR_swigregister
STAR_swigregister(STAR)

class CONS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CONS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CONS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a1"] = _tpm.CONS_a1_set
    __swig_getmethods__["a1"] = _tpm.CONS_a1_get
    if _newclass:a1 = _swig_property(_tpm.CONS_a1_get, _tpm.CONS_a1_set)
    __swig_setmethods__["d1"] = _tpm.CONS_d1_set
    __swig_getmethods__["d1"] = _tpm.CONS_d1_get
    if _newclass:d1 = _swig_property(_tpm.CONS_d1_get, _tpm.CONS_d1_set)
    __swig_setmethods__["a2"] = _tpm.CONS_a2_set
    __swig_getmethods__["a2"] = _tpm.CONS_a2_get
    if _newclass:a2 = _swig_property(_tpm.CONS_a2_get, _tpm.CONS_a2_set)
    __swig_setmethods__["d2"] = _tpm.CONS_d2_set
    __swig_getmethods__["d2"] = _tpm.CONS_d2_get
    if _newclass:d2 = _swig_property(_tpm.CONS_d2_get, _tpm.CONS_d2_set)
    def __init__(self): 
        this = _tpm.new_CONS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_CONS
    __del__ = lambda self : None;
CONS_swigregister = _tpm.CONS_swigregister
CONS_swigregister(CONS)


def precess_m(*args):
  return _tpm.precess_m(*args)
precess_m = _tpm.precess_m

def aberrate(*args):
  return _tpm.aberrate(*args)
aberrate = _tpm.aberrate

def azel2hadec(*args):
  return _tpm.azel2hadec(*args)
azel2hadec = _tpm.azel2hadec

def ecl2equ(*args):
  return _tpm.ecl2equ(*args)
ecl2equ = _tpm.ecl2equ

def ellab(*args):
  return _tpm.ellab(*args)
ellab = _tpm.ellab

def equ2ecl(*args):
  return _tpm.equ2ecl(*args)
equ2ecl = _tpm.equ2ecl

def equ2gal(*args):
  return _tpm.equ2gal(*args)
equ2gal = _tpm.equ2gal

def eterms(*args):
  return _tpm.eterms(*args)
eterms = _tpm.eterms

def fk425(*args):
  return _tpm.fk425(*args)
fk425 = _tpm.fk425

def fk524(*args):
  return _tpm.fk524(*args)
fk524 = _tpm.fk524

def gal2equ(*args):
  return _tpm.gal2equ(*args)
gal2equ = _tpm.gal2equ

def geod2geoc(*args):
  return _tpm.geod2geoc(*args)
geod2geoc = _tpm.geod2geoc

def hadec2azel(*args):
  return _tpm.hadec2azel(*args)
hadec2azel = _tpm.hadec2azel

def ldeflect(*args):
  return _tpm.ldeflect(*args)
ldeflect = _tpm.ldeflect

def precess(*args):
  return _tpm.precess(*args)
precess = _tpm.precess

def proper_motion(*args):
  return _tpm.proper_motion(*args)
proper_motion = _tpm.proper_motion

def tpm_state(*args):
  return _tpm.tpm_state(*args)
tpm_state = _tpm.tpm_state

def delta_AT(*args):
  return _tpm.delta_AT(*args)
delta_AT = _tpm.delta_AT

def eccentricity(*args):
  return _tpm.eccentricity(*args)
eccentricity = _tpm.eccentricity

def eccentricity_dot(*args):
  return _tpm.eccentricity_dot(*args)
eccentricity_dot = _tpm.eccentricity_dot

def func(*args):
  return _tpm.func(*args)
func = _tpm.func

def obliquity(*args):
  return _tpm.obliquity(*args)
obliquity = _tpm.obliquity

def obliquity_dot(*args):
  return _tpm.obliquity_dot(*args)
obliquity_dot = _tpm.obliquity_dot

def refract(*args):
  return _tpm.refract(*args)
refract = _tpm.refract

def refraction(*args):
  return _tpm.refraction(*args)
refraction = _tpm.refraction

def solar_perigee(*args):
  return _tpm.solar_perigee(*args)
solar_perigee = _tpm.solar_perigee

def solar_perigee_dot(*args):
  return _tpm.solar_perigee_dot(*args)
solar_perigee_dot = _tpm.solar_perigee_dot

def tdt2tdb(*args):
  return _tpm.tdt2tdb(*args)
tdt2tdb = _tpm.tdt2tdb

def theta(*args):
  return _tpm.theta(*args)
theta = _tpm.theta

def thetadot(*args):
  return _tpm.thetadot(*args)
thetadot = _tpm.thetadot

def ut12gmst(*args):
  return _tpm.ut12gmst(*args)
ut12gmst = _tpm.ut12gmst

def zee(*args):
  return _tpm.zee(*args)
zee = _tpm.zee

def zeedot(*args):
  return _tpm.zeedot(*args)
zeedot = _tpm.zeedot

def zeta(*args):
  return _tpm.zeta(*args)
zeta = _tpm.zeta

def zetadot(*args):
  return _tpm.zetadot(*args)
zetadot = _tpm.zetadot

def tpm(*args):
  return _tpm.tpm(*args)
tpm = _tpm.tpm

def atm(*args):
  return _tpm.atm(*args)
atm = _tpm.atm

def evp(*args):
  return _tpm.evp(*args)
evp = _tpm.evp

def nutations(*args):
  return _tpm.nutations(*args)
nutations = _tpm.nutations

def refco(*args):
  return _tpm.refco(*args)
refco = _tpm.refco

def tpm_data(*args):
  return _tpm.tpm_data(*args)
tpm_data = _tpm.tpm_data
TPM_S00 = _tpm.TPM_S00
TPM_S01 = _tpm.TPM_S01
TPM_S02 = _tpm.TPM_S02
TPM_S03 = _tpm.TPM_S03
TPM_S04 = _tpm.TPM_S04
TPM_S05 = _tpm.TPM_S05
TPM_S06 = _tpm.TPM_S06
TPM_S07 = _tpm.TPM_S07
TPM_S08 = _tpm.TPM_S08
TPM_S09 = _tpm.TPM_S09
TPM_S10 = _tpm.TPM_S10
TPM_S11 = _tpm.TPM_S11
TPM_S12 = _tpm.TPM_S12
TPM_S13 = _tpm.TPM_S13
TPM_S14 = _tpm.TPM_S14
TPM_S15 = _tpm.TPM_S15
TPM_S16 = _tpm.TPM_S16
TPM_S17 = _tpm.TPM_S17
TPM_S18 = _tpm.TPM_S18
TPM_S19 = _tpm.TPM_S19
TPM_S20 = _tpm.TPM_S20
TPM_S21 = _tpm.TPM_S21
N_TPM_STATES = _tpm.N_TPM_STATES
TPM_T00 = _tpm.TPM_T00
TPM_T01 = _tpm.TPM_T01
TPM_T02 = _tpm.TPM_T02
TPM_T03 = _tpm.TPM_T03
TPM_T04 = _tpm.TPM_T04
TPM_T05 = _tpm.TPM_T05
TPM_T06 = _tpm.TPM_T06
TPM_T07 = _tpm.TPM_T07
TPM_T08 = _tpm.TPM_T08
TPM_T09 = _tpm.TPM_T09
TPM_T10 = _tpm.TPM_T10
TPM_T11 = _tpm.TPM_T11
TPM_T12 = _tpm.TPM_T12
TPM_T13 = _tpm.TPM_T13
TPM_T14 = _tpm.TPM_T14
TPM_T15 = _tpm.TPM_T15
N_TPM_TRANS = _tpm.N_TPM_TRANS
class TPM_TARGET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPM_TARGET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPM_TARGET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _tpm.TPM_TARGET_name_set
    __swig_getmethods__["name"] = _tpm.TPM_TARGET_name_get
    if _newclass:name = _swig_property(_tpm.TPM_TARGET_name_get, _tpm.TPM_TARGET_name_set)
    __swig_setmethods__["state"] = _tpm.TPM_TARGET_state_set
    __swig_getmethods__["state"] = _tpm.TPM_TARGET_state_get
    if _newclass:state = _swig_property(_tpm.TPM_TARGET_state_get, _tpm.TPM_TARGET_state_set)
    __swig_setmethods__["epoch"] = _tpm.TPM_TARGET_epoch_set
    __swig_getmethods__["epoch"] = _tpm.TPM_TARGET_epoch_get
    if _newclass:epoch = _swig_property(_tpm.TPM_TARGET_epoch_get, _tpm.TPM_TARGET_epoch_set)
    __swig_setmethods__["equinox"] = _tpm.TPM_TARGET_equinox_set
    __swig_getmethods__["equinox"] = _tpm.TPM_TARGET_equinox_get
    if _newclass:equinox = _swig_property(_tpm.TPM_TARGET_equinox_get, _tpm.TPM_TARGET_equinox_set)
    __swig_setmethods__["position"] = _tpm.TPM_TARGET_position_set
    __swig_getmethods__["position"] = _tpm.TPM_TARGET_position_get
    if _newclass:position = _swig_property(_tpm.TPM_TARGET_position_get, _tpm.TPM_TARGET_position_set)
    __swig_setmethods__["offset"] = _tpm.TPM_TARGET_offset_set
    __swig_getmethods__["offset"] = _tpm.TPM_TARGET_offset_get
    if _newclass:offset = _swig_property(_tpm.TPM_TARGET_offset_get, _tpm.TPM_TARGET_offset_set)
    __swig_setmethods__["motion"] = _tpm.TPM_TARGET_motion_set
    __swig_getmethods__["motion"] = _tpm.TPM_TARGET_motion_get
    if _newclass:motion = _swig_property(_tpm.TPM_TARGET_motion_get, _tpm.TPM_TARGET_motion_set)
    __swig_setmethods__["parallax"] = _tpm.TPM_TARGET_parallax_set
    __swig_getmethods__["parallax"] = _tpm.TPM_TARGET_parallax_get
    if _newclass:parallax = _swig_property(_tpm.TPM_TARGET_parallax_get, _tpm.TPM_TARGET_parallax_set)
    __swig_setmethods__["speed"] = _tpm.TPM_TARGET_speed_set
    __swig_getmethods__["speed"] = _tpm.TPM_TARGET_speed_get
    if _newclass:speed = _swig_property(_tpm.TPM_TARGET_speed_get, _tpm.TPM_TARGET_speed_set)
    def __init__(self): 
        this = _tpm.new_TPM_TARGET()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_TPM_TARGET
    __del__ = lambda self : None;
TPM_TARGET_swigregister = _tpm.TPM_TARGET_swigregister
TPM_TARGET_swigregister(TPM_TARGET)

TARGET_FK4 = _tpm.TARGET_FK4
TARGET_FK5 = _tpm.TARGET_FK5
TARGET_ECL = _tpm.TARGET_ECL
TARGET_GAL = _tpm.TARGET_GAL
TARGET_APP_HADEC = _tpm.TARGET_APP_HADEC
TARGET_OBS_HADEC = _tpm.TARGET_OBS_HADEC
TARGET_APP_AZEL = _tpm.TARGET_APP_AZEL
TARGET_OBS_AZEL = _tpm.TARGET_OBS_AZEL
TARGET_OBS_WHAM = _tpm.TARGET_OBS_WHAM
TARGET_HADEC = _tpm.TARGET_HADEC
TARGET_TOP_AZEL = _tpm.TARGET_TOP_AZEL
class TPM_BORESIGHT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPM_BORESIGHT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPM_BORESIGHT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["epoch"] = _tpm.TPM_BORESIGHT_epoch_set
    __swig_getmethods__["epoch"] = _tpm.TPM_BORESIGHT_epoch_get
    if _newclass:epoch = _swig_property(_tpm.TPM_BORESIGHT_epoch_get, _tpm.TPM_BORESIGHT_epoch_set)
    __swig_setmethods__["position"] = _tpm.TPM_BORESIGHT_position_set
    __swig_getmethods__["position"] = _tpm.TPM_BORESIGHT_position_get
    if _newclass:position = _swig_property(_tpm.TPM_BORESIGHT_position_get, _tpm.TPM_BORESIGHT_position_set)
    __swig_setmethods__["offset"] = _tpm.TPM_BORESIGHT_offset_set
    __swig_getmethods__["offset"] = _tpm.TPM_BORESIGHT_offset_get
    if _newclass:offset = _swig_property(_tpm.TPM_BORESIGHT_offset_get, _tpm.TPM_BORESIGHT_offset_set)
    __swig_setmethods__["motion"] = _tpm.TPM_BORESIGHT_motion_set
    __swig_getmethods__["motion"] = _tpm.TPM_BORESIGHT_motion_get
    if _newclass:motion = _swig_property(_tpm.TPM_BORESIGHT_motion_get, _tpm.TPM_BORESIGHT_motion_set)
    def __init__(self): 
        this = _tpm.new_TPM_BORESIGHT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_TPM_BORESIGHT
    __del__ = lambda self : None;
TPM_BORESIGHT_swigregister = _tpm.TPM_BORESIGHT_swigregister
TPM_BORESIGHT_swigregister(TPM_BORESIGHT)

class TPM_TSTATE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPM_TSTATE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPM_TSTATE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["utc"] = _tpm.TPM_TSTATE_utc_set
    __swig_getmethods__["utc"] = _tpm.TPM_TSTATE_utc_get
    if _newclass:utc = _swig_property(_tpm.TPM_TSTATE_utc_get, _tpm.TPM_TSTATE_utc_set)
    __swig_setmethods__["delta_at"] = _tpm.TPM_TSTATE_delta_at_set
    __swig_getmethods__["delta_at"] = _tpm.TPM_TSTATE_delta_at_get
    if _newclass:delta_at = _swig_property(_tpm.TPM_TSTATE_delta_at_get, _tpm.TPM_TSTATE_delta_at_set)
    __swig_setmethods__["delta_ut"] = _tpm.TPM_TSTATE_delta_ut_set
    __swig_getmethods__["delta_ut"] = _tpm.TPM_TSTATE_delta_ut_get
    if _newclass:delta_ut = _swig_property(_tpm.TPM_TSTATE_delta_ut_get, _tpm.TPM_TSTATE_delta_ut_set)
    __swig_setmethods__["lon"] = _tpm.TPM_TSTATE_lon_set
    __swig_getmethods__["lon"] = _tpm.TPM_TSTATE_lon_get
    if _newclass:lon = _swig_property(_tpm.TPM_TSTATE_lon_get, _tpm.TPM_TSTATE_lon_set)
    __swig_setmethods__["lat"] = _tpm.TPM_TSTATE_lat_set
    __swig_getmethods__["lat"] = _tpm.TPM_TSTATE_lat_get
    if _newclass:lat = _swig_property(_tpm.TPM_TSTATE_lat_get, _tpm.TPM_TSTATE_lat_set)
    __swig_setmethods__["alt"] = _tpm.TPM_TSTATE_alt_set
    __swig_getmethods__["alt"] = _tpm.TPM_TSTATE_alt_get
    if _newclass:alt = _swig_property(_tpm.TPM_TSTATE_alt_get, _tpm.TPM_TSTATE_alt_set)
    __swig_setmethods__["xpole"] = _tpm.TPM_TSTATE_xpole_set
    __swig_getmethods__["xpole"] = _tpm.TPM_TSTATE_xpole_get
    if _newclass:xpole = _swig_property(_tpm.TPM_TSTATE_xpole_get, _tpm.TPM_TSTATE_xpole_set)
    __swig_setmethods__["ypole"] = _tpm.TPM_TSTATE_ypole_set
    __swig_getmethods__["ypole"] = _tpm.TPM_TSTATE_ypole_get
    if _newclass:ypole = _swig_property(_tpm.TPM_TSTATE_ypole_get, _tpm.TPM_TSTATE_ypole_set)
    __swig_setmethods__["T"] = _tpm.TPM_TSTATE_T_set
    __swig_getmethods__["T"] = _tpm.TPM_TSTATE_T_get
    if _newclass:T = _swig_property(_tpm.TPM_TSTATE_T_get, _tpm.TPM_TSTATE_T_set)
    __swig_setmethods__["P"] = _tpm.TPM_TSTATE_P_set
    __swig_getmethods__["P"] = _tpm.TPM_TSTATE_P_get
    if _newclass:P = _swig_property(_tpm.TPM_TSTATE_P_get, _tpm.TPM_TSTATE_P_set)
    __swig_setmethods__["H"] = _tpm.TPM_TSTATE_H_set
    __swig_getmethods__["H"] = _tpm.TPM_TSTATE_H_get
    if _newclass:H = _swig_property(_tpm.TPM_TSTATE_H_get, _tpm.TPM_TSTATE_H_set)
    __swig_setmethods__["wavelength"] = _tpm.TPM_TSTATE_wavelength_set
    __swig_getmethods__["wavelength"] = _tpm.TPM_TSTATE_wavelength_get
    if _newclass:wavelength = _swig_property(_tpm.TPM_TSTATE_wavelength_get, _tpm.TPM_TSTATE_wavelength_set)
    __swig_setmethods__["tai"] = _tpm.TPM_TSTATE_tai_set
    __swig_getmethods__["tai"] = _tpm.TPM_TSTATE_tai_get
    if _newclass:tai = _swig_property(_tpm.TPM_TSTATE_tai_get, _tpm.TPM_TSTATE_tai_set)
    __swig_setmethods__["tdt"] = _tpm.TPM_TSTATE_tdt_set
    __swig_getmethods__["tdt"] = _tpm.TPM_TSTATE_tdt_get
    if _newclass:tdt = _swig_property(_tpm.TPM_TSTATE_tdt_get, _tpm.TPM_TSTATE_tdt_set)
    __swig_setmethods__["tdb"] = _tpm.TPM_TSTATE_tdb_set
    __swig_getmethods__["tdb"] = _tpm.TPM_TSTATE_tdb_get
    if _newclass:tdb = _swig_property(_tpm.TPM_TSTATE_tdb_get, _tpm.TPM_TSTATE_tdb_set)
    __swig_setmethods__["obliquity"] = _tpm.TPM_TSTATE_obliquity_set
    __swig_getmethods__["obliquity"] = _tpm.TPM_TSTATE_obliquity_get
    if _newclass:obliquity = _swig_property(_tpm.TPM_TSTATE_obliquity_get, _tpm.TPM_TSTATE_obliquity_set)
    __swig_setmethods__["nut_lon"] = _tpm.TPM_TSTATE_nut_lon_set
    __swig_getmethods__["nut_lon"] = _tpm.TPM_TSTATE_nut_lon_get
    if _newclass:nut_lon = _swig_property(_tpm.TPM_TSTATE_nut_lon_get, _tpm.TPM_TSTATE_nut_lon_set)
    __swig_setmethods__["nut_obl"] = _tpm.TPM_TSTATE_nut_obl_set
    __swig_getmethods__["nut_obl"] = _tpm.TPM_TSTATE_nut_obl_get
    if _newclass:nut_obl = _swig_property(_tpm.TPM_TSTATE_nut_obl_get, _tpm.TPM_TSTATE_nut_obl_set)
    __swig_setmethods__["nm"] = _tpm.TPM_TSTATE_nm_set
    __swig_getmethods__["nm"] = _tpm.TPM_TSTATE_nm_get
    if _newclass:nm = _swig_property(_tpm.TPM_TSTATE_nm_get, _tpm.TPM_TSTATE_nm_set)
    __swig_setmethods__["pm"] = _tpm.TPM_TSTATE_pm_set
    __swig_getmethods__["pm"] = _tpm.TPM_TSTATE_pm_get
    if _newclass:pm = _swig_property(_tpm.TPM_TSTATE_pm_get, _tpm.TPM_TSTATE_pm_set)
    __swig_setmethods__["ut1"] = _tpm.TPM_TSTATE_ut1_set
    __swig_getmethods__["ut1"] = _tpm.TPM_TSTATE_ut1_get
    if _newclass:ut1 = _swig_property(_tpm.TPM_TSTATE_ut1_get, _tpm.TPM_TSTATE_ut1_set)
    __swig_setmethods__["gmst"] = _tpm.TPM_TSTATE_gmst_set
    __swig_getmethods__["gmst"] = _tpm.TPM_TSTATE_gmst_get
    if _newclass:gmst = _swig_property(_tpm.TPM_TSTATE_gmst_get, _tpm.TPM_TSTATE_gmst_set)
    __swig_setmethods__["gast"] = _tpm.TPM_TSTATE_gast_set
    __swig_getmethods__["gast"] = _tpm.TPM_TSTATE_gast_get
    if _newclass:gast = _swig_property(_tpm.TPM_TSTATE_gast_get, _tpm.TPM_TSTATE_gast_set)
    __swig_setmethods__["last"] = _tpm.TPM_TSTATE_last_set
    __swig_getmethods__["last"] = _tpm.TPM_TSTATE_last_get
    if _newclass:last = _swig_property(_tpm.TPM_TSTATE_last_get, _tpm.TPM_TSTATE_last_set)
    __swig_setmethods__["eb"] = _tpm.TPM_TSTATE_eb_set
    __swig_getmethods__["eb"] = _tpm.TPM_TSTATE_eb_get
    if _newclass:eb = _swig_property(_tpm.TPM_TSTATE_eb_get, _tpm.TPM_TSTATE_eb_set)
    __swig_setmethods__["eh"] = _tpm.TPM_TSTATE_eh_set
    __swig_getmethods__["eh"] = _tpm.TPM_TSTATE_eh_get
    if _newclass:eh = _swig_property(_tpm.TPM_TSTATE_eh_get, _tpm.TPM_TSTATE_eh_set)
    __swig_setmethods__["obs_m"] = _tpm.TPM_TSTATE_obs_m_set
    __swig_getmethods__["obs_m"] = _tpm.TPM_TSTATE_obs_m_get
    if _newclass:obs_m = _swig_property(_tpm.TPM_TSTATE_obs_m_get, _tpm.TPM_TSTATE_obs_m_set)
    __swig_setmethods__["obs_t"] = _tpm.TPM_TSTATE_obs_t_set
    __swig_getmethods__["obs_t"] = _tpm.TPM_TSTATE_obs_t_get
    if _newclass:obs_t = _swig_property(_tpm.TPM_TSTATE_obs_t_get, _tpm.TPM_TSTATE_obs_t_set)
    __swig_setmethods__["obs_s"] = _tpm.TPM_TSTATE_obs_s_set
    __swig_getmethods__["obs_s"] = _tpm.TPM_TSTATE_obs_s_get
    if _newclass:obs_s = _swig_property(_tpm.TPM_TSTATE_obs_s_get, _tpm.TPM_TSTATE_obs_s_set)
    __swig_setmethods__["refa"] = _tpm.TPM_TSTATE_refa_set
    __swig_getmethods__["refa"] = _tpm.TPM_TSTATE_refa_get
    if _newclass:refa = _swig_property(_tpm.TPM_TSTATE_refa_get, _tpm.TPM_TSTATE_refa_set)
    __swig_setmethods__["refb"] = _tpm.TPM_TSTATE_refb_set
    __swig_getmethods__["refb"] = _tpm.TPM_TSTATE_refb_get
    if _newclass:refb = _swig_property(_tpm.TPM_TSTATE_refb_get, _tpm.TPM_TSTATE_refb_set)
    def __init__(self): 
        this = _tpm.new_TPM_TSTATE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_TPM_TSTATE
    __del__ = lambda self : None;
TPM_TSTATE_swigregister = _tpm.TPM_TSTATE_swigregister
TPM_TSTATE_swigregister(TPM_TSTATE)

TPM_INIT = _tpm.TPM_INIT
TPM_FAST = _tpm.TPM_FAST
TPM_MEDIUM = _tpm.TPM_MEDIUM
TPM_SLOW = _tpm.TPM_SLOW
TPM_REFRACTION = _tpm.TPM_REFRACTION
TPM_ALL = _tpm.TPM_ALL
class TPM_PMCELL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TPM_PMCELL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TPM_PMCELL, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptrans"] = _tpm.TPM_PMCELL_ptrans_set
    __swig_getmethods__["ptrans"] = _tpm.TPM_PMCELL_ptrans_get
    if _newclass:ptrans = _swig_property(_tpm.TPM_PMCELL_ptrans_get, _tpm.TPM_PMCELL_ptrans_set)
    __swig_setmethods__["pstate"] = _tpm.TPM_PMCELL_pstate_set
    __swig_getmethods__["pstate"] = _tpm.TPM_PMCELL_pstate_get
    if _newclass:pstate = _swig_property(_tpm.TPM_PMCELL_pstate_get, _tpm.TPM_PMCELL_pstate_set)
    def __init__(self): 
        this = _tpm.new_TPM_PMCELL()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_TPM_PMCELL
    __del__ = lambda self : None;
TPM_PMCELL_swigregister = _tpm.TPM_PMCELL_swigregister
TPM_PMCELL_swigregister(TPM_PMCELL)


def convert(*args):
  return _tpm.convert(*args)
convert = _tpm.convert


