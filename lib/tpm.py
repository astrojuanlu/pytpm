# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tpm', [dirname(__file__)])
        except ImportError:
            import _tpm
            return _tpm
        if fp is not None:
            try:
                _mod = imp.load_module('_tpm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tpm = swig_import_helper()
    del swig_import_helper
else:
    import _tpm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


POS = _tpm.POS
VEL = _tpm.VEL
M_PI = _tpm.M_PI
CARTESIAN = _tpm.CARTESIAN
SPHERICAL = _tpm.SPHERICAL
POLAR = _tpm.POLAR
REAL = _tpm.REAL
IMAG = _tpm.IMAG
MJD_0 = _tpm.MJD_0
B1950 = _tpm.B1950
J2000 = _tpm.J2000
J1984 = _tpm.J1984
CB = _tpm.CB
CJ = _tpm.CJ
SUNDAY = _tpm.SUNDAY
MONDAY = _tpm.MONDAY
TUESDAY = _tpm.TUESDAY
WEDNESDAY = _tpm.WEDNESDAY
THURSDAY = _tpm.THURSDAY
FRIDAY = _tpm.FRIDAY
SATURDAY = _tpm.SATURDAY
class DMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dd"] = _tpm.DMS_dd_set
    __swig_getmethods__["dd"] = _tpm.DMS_dd_get
    if _newclass:dd = _swig_property(_tpm.DMS_dd_get, _tpm.DMS_dd_set)
    __swig_setmethods__["mm"] = _tpm.DMS_mm_set
    __swig_getmethods__["mm"] = _tpm.DMS_mm_get
    if _newclass:mm = _swig_property(_tpm.DMS_mm_get, _tpm.DMS_mm_set)
    __swig_setmethods__["ss"] = _tpm.DMS_ss_set
    __swig_getmethods__["ss"] = _tpm.DMS_ss_get
    if _newclass:ss = _swig_property(_tpm.DMS_ss_get, _tpm.DMS_ss_set)
    def __init__(self): 
        this = _tpm.new_DMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_DMS
    __del__ = lambda self : None;
DMS_swigregister = _tpm.DMS_swigregister
DMS_swigregister(DMS)

class HMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hh"] = _tpm.HMS_hh_set
    __swig_getmethods__["hh"] = _tpm.HMS_hh_get
    if _newclass:hh = _swig_property(_tpm.HMS_hh_get, _tpm.HMS_hh_set)
    __swig_setmethods__["mm"] = _tpm.HMS_mm_set
    __swig_getmethods__["mm"] = _tpm.HMS_mm_get
    if _newclass:mm = _swig_property(_tpm.HMS_mm_get, _tpm.HMS_mm_set)
    __swig_setmethods__["ss"] = _tpm.HMS_ss_set
    __swig_getmethods__["ss"] = _tpm.HMS_ss_get
    if _newclass:ss = _swig_property(_tpm.HMS_ss_get, _tpm.HMS_ss_set)
    def __init__(self): 
        this = _tpm.new_HMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_HMS
    __del__ = lambda self : None;
HMS_swigregister = _tpm.HMS_swigregister
HMS_swigregister(HMS)

class YMD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YMD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YMD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["y"] = _tpm.YMD_y_set
    __swig_getmethods__["y"] = _tpm.YMD_y_get
    if _newclass:y = _swig_property(_tpm.YMD_y_get, _tpm.YMD_y_set)
    __swig_setmethods__["m"] = _tpm.YMD_m_set
    __swig_getmethods__["m"] = _tpm.YMD_m_get
    if _newclass:m = _swig_property(_tpm.YMD_m_get, _tpm.YMD_m_set)
    __swig_setmethods__["dd"] = _tpm.YMD_dd_set
    __swig_getmethods__["dd"] = _tpm.YMD_dd_get
    if _newclass:dd = _swig_property(_tpm.YMD_dd_get, _tpm.YMD_dd_set)
    __swig_setmethods__["hms"] = _tpm.YMD_hms_set
    __swig_getmethods__["hms"] = _tpm.YMD_hms_get
    if _newclass:hms = _swig_property(_tpm.YMD_hms_get, _tpm.YMD_hms_set)
    def __init__(self): 
        this = _tpm.new_YMD()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_YMD
    __del__ = lambda self : None;
YMD_swigregister = _tpm.YMD_swigregister
YMD_swigregister(YMD)

class JD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dd"] = _tpm.JD_dd_set
    __swig_getmethods__["dd"] = _tpm.JD_dd_get
    if _newclass:dd = _swig_property(_tpm.JD_dd_get, _tpm.JD_dd_set)
    __swig_setmethods__["hms"] = _tpm.JD_hms_set
    __swig_getmethods__["hms"] = _tpm.JD_hms_get
    if _newclass:hms = _swig_property(_tpm.JD_hms_get, _tpm.JD_hms_set)
    def __init__(self): 
        this = _tpm.new_JD()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tpm.delete_JD
    __del__ = lambda self : None;
JD_swigregister = _tpm.JD_swigregister
JD_swigregister(JD)


def d2dms(*args):
  return _tpm.d2dms(*args)
d2dms = _tpm.d2dms

def dms2dms(*args):
  return _tpm.dms2dms(*args)
dms2dms = _tpm.dms2dms

def dms_diff(*args):
  return _tpm.dms_diff(*args)
dms_diff = _tpm.dms_diff

def dms_sum(*args):
  return _tpm.dms_sum(*args)
dms_sum = _tpm.dms_sum

def hms2dms(*args):
  return _tpm.hms2dms(*args)
hms2dms = _tpm.hms2dms

def dms2hms(*args):
  return _tpm.dms2hms(*args)
dms2hms = _tpm.dms2hms

def h2hms(*args):
  return _tpm.h2hms(*args)
h2hms = _tpm.h2hms

def hms2hms(*args):
  return _tpm.hms2hms(*args)
hms2hms = _tpm.hms2hms

def hms_diff(*args):
  return _tpm.hms_diff(*args)
hms_diff = _tpm.hms_diff

def hms_sum(*args):
  return _tpm.hms_sum(*args)
hms_sum = _tpm.hms_sum

def j2jd(*args):
  return _tpm.j2jd(*args)
j2jd = _tpm.j2jd

def jd2jd(*args):
  return _tpm.jd2jd(*args)
jd2jd = _tpm.jd2jd

def jd_diff(*args):
  return _tpm.jd_diff(*args)
jd_diff = _tpm.jd_diff

def jd_now():
  return _tpm.jd_now()
jd_now = _tpm.jd_now

def jd_sum(*args):
  return _tpm.jd_sum(*args)
jd_sum = _tpm.jd_sum

def ymd2jd(*args):
  return _tpm.ymd2jd(*args)
ymd2jd = _tpm.ymd2jd

def jd2ymd(*args):
  return _tpm.jd2ymd(*args)
jd2ymd = _tpm.jd2ymd

def rdb2ymd(*args):
  return _tpm.rdb2ymd(*args)
rdb2ymd = _tpm.rdb2ymd

def y2ymd(*args):
  return _tpm.y2ymd(*args)
y2ymd = _tpm.y2ymd

def ydd2ymd(*args):
  return _tpm.ydd2ymd(*args)
ydd2ymd = _tpm.ydd2ymd

def ymd2ymd(*args):
  return _tpm.ymd2ymd(*args)
ymd2ymd = _tpm.ymd2ymd

def fmt_alpha(*args):
  return _tpm.fmt_alpha(*args)
fmt_alpha = _tpm.fmt_alpha

def fmt_d(*args):
  return _tpm.fmt_d(*args)
fmt_d = _tpm.fmt_d

def fmt_delta(*args):
  return _tpm.fmt_delta(*args)
fmt_delta = _tpm.fmt_delta

def fmt_h(*args):
  return _tpm.fmt_h(*args)
fmt_h = _tpm.fmt_h

def fmt_j(*args):
  return _tpm.fmt_j(*args)
fmt_j = _tpm.fmt_j

def fmt_rdb(*args):
  return _tpm.fmt_rdb(*args)
fmt_rdb = _tpm.fmt_rdb

def fmt_ymd(*args):
  return _tpm.fmt_ymd(*args)
fmt_ymd = _tpm.fmt_ymd

def fmt_ymd_raw(*args):
  return _tpm.fmt_ymd_raw(*args)
fmt_ymd_raw = _tpm.fmt_ymd_raw

def d2d(*args):
  return _tpm.d2d(*args)
d2d = _tpm.d2d

def dms2d(*args):
  return _tpm.dms2d(*args)
dms2d = _tpm.dms2d

def gcal2j(*args):
  return _tpm.gcal2j(*args)
gcal2j = _tpm.gcal2j

def h2h(*args):
  return _tpm.h2h(*args)
h2h = _tpm.h2h

def hms2h(*args):
  return _tpm.hms2h(*args)
hms2h = _tpm.hms2h

def jcal2j(*args):
  return _tpm.jcal2j(*args)
jcal2j = _tpm.jcal2j

def jd2j(*args):
  return _tpm.jd2j(*args)
jd2j = _tpm.jd2j

def r2r(*args):
  return _tpm.r2r(*args)
r2r = _tpm.r2r

def utc_now():
  return _tpm.utc_now()
utc_now = _tpm.utc_now

def ymd2dd(*args):
  return _tpm.ymd2dd(*args)
ymd2dd = _tpm.ymd2dd

def ymd2rdb(*args):
  return _tpm.ymd2rdb(*args)
ymd2rdb = _tpm.ymd2rdb

def ymd2y(*args):
  return _tpm.ymd2y(*args)
ymd2y = _tpm.ymd2y

def j2dow(*args):
  return _tpm.j2dow(*args)
j2dow = _tpm.j2dow

def y2doy(*args):
  return _tpm.y2doy(*args)
y2doy = _tpm.y2doy

def j2gcal(*args):
  return _tpm.j2gcal(*args)
j2gcal = _tpm.j2gcal

def j2jcal(*args):
  return _tpm.j2jcal(*args)
j2jcal = _tpm.j2jcal
IAU_K = _tpm.IAU_K
IAU_DM = _tpm.IAU_DM
IAU_AU = _tpm.IAU_AU
IAU_C = _tpm.IAU_C
IAU_RE = _tpm.IAU_RE
IAU_RM = _tpm.IAU_RM
IAU_F = _tpm.IAU_F
IAU_KAPPA = _tpm.IAU_KAPPA
IAU_W = _tpm.IAU_W
GAL_RA = _tpm.GAL_RA
GAL_DEC = _tpm.GAL_DEC
GAL_LON = _tpm.GAL_LON
PRECESS_NEWCOMB = _tpm.PRECESS_NEWCOMB
PRECESS_ANDOYER = _tpm.PRECESS_ANDOYER
PRECESS_KINOSHITA = _tpm.PRECESS_KINOSHITA
PRECESS_LIESKE = _tpm.PRECESS_LIESKE
PRECESS_FK4 = _tpm.PRECESS_FK4
PRECESS_FK5 = _tpm.PRECESS_FK5
PRECESS_INERTIAL = _tpm.PRECESS_INERTIAL
PRECESS_ROTATING = _tpm.PRECESS_ROTATING

def tpm_state(*args):
  return _tpm.tpm_state(*args)
tpm_state = _tpm.tpm_state

def delta_AT(*args):
  return _tpm.delta_AT(*args)
delta_AT = _tpm.delta_AT

def tdt2tdb(*args):
  return _tpm.tdt2tdb(*args)
tdt2tdb = _tpm.tdt2tdb

def ut12gmst(*args):
  return _tpm.ut12gmst(*args)
ut12gmst = _tpm.ut12gmst
TPM_S00 = _tpm.TPM_S00
TPM_S01 = _tpm.TPM_S01
TPM_S02 = _tpm.TPM_S02
TPM_S03 = _tpm.TPM_S03
TPM_S04 = _tpm.TPM_S04
TPM_S05 = _tpm.TPM_S05
TPM_S06 = _tpm.TPM_S06
TPM_S07 = _tpm.TPM_S07
TPM_S08 = _tpm.TPM_S08
TPM_S09 = _tpm.TPM_S09
TPM_S10 = _tpm.TPM_S10
TPM_S11 = _tpm.TPM_S11
TPM_S12 = _tpm.TPM_S12
TPM_S13 = _tpm.TPM_S13
TPM_S14 = _tpm.TPM_S14
TPM_S15 = _tpm.TPM_S15
TPM_S16 = _tpm.TPM_S16
TPM_S17 = _tpm.TPM_S17
TPM_S18 = _tpm.TPM_S18
TPM_S19 = _tpm.TPM_S19
TPM_S20 = _tpm.TPM_S20
TPM_S21 = _tpm.TPM_S21
N_TPM_STATES = _tpm.N_TPM_STATES
TPM_T00 = _tpm.TPM_T00
TPM_T01 = _tpm.TPM_T01
TPM_T02 = _tpm.TPM_T02
TPM_T03 = _tpm.TPM_T03
TPM_T04 = _tpm.TPM_T04
TPM_T05 = _tpm.TPM_T05
TPM_T06 = _tpm.TPM_T06
TPM_T07 = _tpm.TPM_T07
TPM_T08 = _tpm.TPM_T08
TPM_T09 = _tpm.TPM_T09
TPM_T10 = _tpm.TPM_T10
TPM_T11 = _tpm.TPM_T11
TPM_T12 = _tpm.TPM_T12
TPM_T13 = _tpm.TPM_T13
TPM_T14 = _tpm.TPM_T14
TPM_T15 = _tpm.TPM_T15
N_TPM_TRANS = _tpm.N_TPM_TRANS
TARGET_FK4 = _tpm.TARGET_FK4
TARGET_FK5 = _tpm.TARGET_FK5
TARGET_ECL = _tpm.TARGET_ECL
TARGET_GAL = _tpm.TARGET_GAL
TARGET_APP_HADEC = _tpm.TARGET_APP_HADEC
TARGET_OBS_HADEC = _tpm.TARGET_OBS_HADEC
TARGET_APP_AZEL = _tpm.TARGET_APP_AZEL
TARGET_OBS_AZEL = _tpm.TARGET_OBS_AZEL
TARGET_OBS_WHAM = _tpm.TARGET_OBS_WHAM
TARGET_HADEC = _tpm.TARGET_HADEC
TARGET_TOP_AZEL = _tpm.TARGET_TOP_AZEL
TPM_INIT = _tpm.TPM_INIT
TPM_FAST = _tpm.TPM_FAST
TPM_MEDIUM = _tpm.TPM_MEDIUM
TPM_SLOW = _tpm.TPM_SLOW
TPM_REFRACTION = _tpm.TPM_REFRACTION
TPM_ALL = _tpm.TPM_ALL

def convert(*args):
  return _tpm.convert(*args)
convert = _tpm.convert


